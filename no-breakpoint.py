#!/usr/bin/python
# by s1kr10s

key=[]
flag=''
checksum = 0

rol = lambda val, r_bits, max_bits: \
	(val << r_bits%max_bits) & (2**max_bits-1) | \
	((val & (2**max_bits-1)) >> (max_bits-(r_bits%max_bits)))

# Seccion .text -> for i in $(objdump -d ch20.bin -M intel |grep "^ " |cut -f2); do echo -n '''$i'','; done;echo
seccion_text = [0xB8,0x04,0x00,0x00,0x00,0xBB,0x01,0x00,0x00,0x00,0xB9,0xA1,
                0x91,0x04,0x08,0xBA,0x26,0x00,0x00,0x00,0xCD,0x80,0xB8,0x03,
                0x00,0x00,0x00,0x31,0xDB,0xB9,0x88,0x91,0x04,0x08,0xBA,0x33,
                0x00,0x00,0x00,0xCD,0x80,0x31,0xC9,0xB8,0x80,0x80,0x04,0x08,
                0xBB,0x23,0x81,0x04,0x08,0xE8,0x5B,0x00,0x00,0x00,0x89,0xCA,
                0xB9,0x19,0x00,0x00,0x00,0xB8,0x55,0x91,0x04,0x08,0xBB,0x88,
                0x91,0x04,0x08,0xD1,0xCA,0x8A,0x44,0x08,0xFF,0x8A,0x5C,0x0B,
                0xFF,0x30,0xD8,0x30,0xD0,0x75,0x1B,0x49,0x75,0xE3,0xB8,0x04,
                0x00,0x00,0x00,0xBB,0x01,0x00,0x00,0x00,0xB9,0x24,0x91,0x04,
                0x08,0xBA,0x26,0x00,0x00,0x00,0xCD,0x80,0xEB,0x16,0xB8,0x04,
                0x00,0x00,0x00,0xBB,0x01,0x00,0x00,0x00,0xB9,0x4A,0x91,0x04,
                0x08,0xBA,0x0B,0x00,0x00,0x00,0xCD,0x80,0xB8,0x01,0x00,0x00,
                0x00,0x31,0xDB,0xCD,0x80,0x29,0xC3,0x31,0xC9,0x02,0x08,0xC1,
                0xC1,0x03,0x40,0x4B,0x75,0xF7,0xC3]

unk_8049155  = [0x1E,0xCD,0x2A,0xD5,0x34,
                0x87,0xFC,0x78,0x64,0x35,
                0x9D,0xEC,0xDE,0x15,0xAC,
                0x97,0x99,0xAF,0x96,0xDA,
                0x79,0x26,0x4F,0x32,0xE0]

for i in seccion_text:
	checksum = (checksum - (checksum & 0xff)) + (((checksum & 0xff) + i) & 0xff) # Reemplazamos el ultimo byte del checksum 0xd58efc00, 0x2c = 0xd58efc2c
	checksum = rol(checksum,3,32)

print "\nSUM : "+hex(checksum)
edx = checksum>>1 # ror 0xAC77E166 (2893537638),1 = 0x563BF0B3 (1446768819)

for i in unk_8049155: # LLenamos array con la key cifrada en ascii
	key+=[i]

for al in key[::-1]: # Recorrimos el array de manera inversa 
	dl=edx & 0xff # Obtenemos el ultimo byte del calculo ror
	flag+=chr(dl^al) # Calculo checksum ^ Key byte = Password
	edx>>=1 # ror edx,1

print "FLAG: "+flag[::-1]+"\n"

